alias st='spring stop'
alias be='bundle exec'
alias gitlg="git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
alias gfp="git fetch -p"
alias gc="git commit"
alias gp="git pull"
alias gfhs="git flow hotfix start"
alias gfhf="git flow hotfix finish"
alias gps="git push"

alias cleanup-docker='docker image prune -a --filter "until=24h" && docker container prune --filter "until=24h" '
export GIT_MERGE_AUTOEDIT=no
export CF_DIAL_TIMEOUT=10
export VM=true
#export TERM=screen-256color

parse_git_branch() {
  PARSE_BASH_PREFIX='⚠️ 💣'
  PARSE_BASH_SUFFIX='💣⚠️ '

  git branch 2>/dev/null |
    sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/' |
    sed -e "s/main/$PARSE_BASH_PREFIX main $PARSE_BASH_SUFFIX/g" |
    sed -e "s/master/$PARSE_BASH_PREFIX master $PARSE_BASH_SUFFIX/g" |
    sed -e "s/develop/$PARSE_BASH_PREFIX develop $PARSE_BASH_SUFFIX/g"
}

detect_spring() {
  running=$(ps aux | grep spring | grep ${PWD##*/} | wc -l)
  if [[ $running -gt 0 ]]; then
    echo ""
  else
    echo "(SPRING)"
  fi
}

parse_repos() {
  if [ -d "$(pwd)/.git" ]; then
    parse_git_branch
  fi
}

parse_state() {
  [ $(git rev-parse HEAD) = $(git ls-remote $(git rev-parse --abbrev-ref @{u} |
    sed 's/\// /g') | cut -f1) ] && echo '' || echo '*'
}

__rbenv_ps1() {
  rbenv_ruby_version=$(rbenv version | sed -e 's/ .*//')
  printf $rbenv_ruby_version
}

ruby_version_name() {
  #if  then
  echo " $(__rbenv_ps1)"
  # else
  #  echo "<${GEM_HOME##*/}>"
  #fi
}

__nvm_ps1() {
  nvm_version=$(nvm current | sed -e 's/ .*//' | sed -e 's/v//')
  printf $nvm_version
}

nodejs_version_name() {
  echo " $(__nvm_ps1)"
}

detect_basename() {
  printf "\033k$(basename $(pwd))\033\\"

}

function prompt {
  local GRAY="\[\033[1;30m\]"
  local LIGHT_GRAY="\[\033[0;37m\]"
  local CYAN="\[\033[0;36m\]"
  local LIGHT_CYAN="\[\033[1;36m\]"
  local NO_COLOUR="\[\033[0m\]"
  local BLUE="\[\033[0;34m\]"
  local LIGHT_BLUE="\[\033[1;34m\]"
  local RED="\[\033[0;31m\]"
  local LIGHT_RED="\[\033[1;31m\]"
  local GREEN="\[\033[0;32m\]"
  local LIGHT_GREEN="\[\033[1;32m\]"
  local PURPLE="\[\033[0;35m\]"
  local LIGHT_PURPLE="\[\033[1;35m\]"
  local BROWN="\[\033[0;33m\]"
  local YELLOW="\[\033[1;33m\]"
  local BLACK="\[\033[0;30m\]"
  local WHITE="\[\033[1;37m\]"

  PS1="$LIGHT_GREEN\u$LIGHT_GRAY@$LIGHT_CYAN\h$LIGHT_GRAY($LIGHT_BLUE\$(date +%H:%M:%S)$LIGHT_GRAY) $PURPLE\w\n$LIGHT_RED\$(ruby_version_name)$GRAY|$LIGHT_CYAN\$(nodejs_version_name)$LIGHT_GREEN \$(parse_repos)$LIGHT_GRAY: "
  PS2='$LIGHT_BLUE>$LIGHT_GRAY '
  export REMOTE_PS1="$LIGHT_GREEN\u$LIGHT_GRAY@$LIGHT_CYAN\h$LIGHT_GRAY($LIGHT_BLUE\$(date +%H:%M:%S)$LIGHT_GRAY) $PURPLE\w\n$LIGHT_GREEN $LIGHT_GRAY: "
}
prompt
